const hre = require("hardhat");

class MockKeeper {
  constructor() {
    this.vaultAddress = "0xb6494e339FD35abA0E5845a2dc0B47D14c68993d";
    this.interval = 15000; // 15ÁßíÊ£ÄÊü•‰∏ÄÊ¨°
    this.isRunning = false;
  }

  async initialize() {
    const [signer] = await hre.ethers.getSigners();
    this.signer = signer;
    
    // Vault ABI (ÁÆÄÂåñÁâà)
    const vaultABI = [
      "function harvest() external",
      "function balance() external view returns (uint256)",
      "function lastHarvest() external view returns (uint256)",
      "function keeper() external view returns (address)",
      "function totalSupply() external view returns (uint256)",
      "function getPricePerFullShare() external view returns (uint256)"
    ];
    
    this.vault = new hre.ethers.Contract(this.vaultAddress, vaultABI, signer);
    
    console.log("ü§ñ Mock Keeper initialized");
    console.log("Keeper Address:", signer.address);
    console.log("Vault Address:", this.vaultAddress);
    
    // Ê£ÄÊü•keeperÊùÉÈôê
    try {
      const authorizedKeeper = await this.vault.keeper();
      console.log("Authorized Keeper:", authorizedKeeper);
      console.log("Is Authorized:", authorizedKeeper.toLowerCase() === signer.address.toLowerCase());
    } catch (error) {
      console.log("Warning: Could not check keeper authorization");
    }
  }

  async checkVaultStats() {
    try {
      const balance = await this.vault.balance();
      const totalSupply = await this.vault.totalSupply();
      const pricePerShare = await this.vault.getPricePerFullShare();
      const lastHarvest = await this.vault.lastHarvest();
      
      console.log("\nüìä Vault Statistics:");
      console.log("TVL:", hre.ethers.formatUnits(balance, 6), "USDC");
      console.log("Total Shares:", hre.ethers.formatUnits(totalSupply, 18));
      console.log("Price per Share:", hre.ethers.formatUnits(pricePerShare, 18));
      console.log("Last Harvest:", new Date(Number(lastHarvest) * 1000).toLocaleString());
      console.log("Time since last harvest:", Math.floor((Date.now() / 1000) - Number(lastHarvest)), "seconds");
      
      return {
        balance: Number(balance),
        totalSupply: Number(totalSupply),
        pricePerShare: Number(pricePerShare),
        lastHarvest: Number(lastHarvest),
        timeSinceHarvest: Math.floor((Date.now() / 1000) - Number(lastHarvest))
      };
      
    } catch (error) {
      console.error("‚ùå Error checking vault stats:", error.message);
      return null;
    }
  }

  async checkHarvestConditions(stats) {
    if (!stats) return false;
    
    const minInterval = 3600; // 1Â∞èÊó∂
    const minBalance = 1000000000; // 1000 USDC (6 decimals)
    
    console.log("\nüîç Harvest Conditions Check:");
    console.log("Min interval required:", minInterval, "seconds");
    console.log("Time since last harvest:", stats.timeSinceHarvest, "seconds");
    console.log("Min balance required:", hre.ethers.formatUnits(minBalance, 6), "USDC");
    console.log("Current balance:", hre.ethers.formatUnits(stats.balance, 6), "USDC");
    
    const timeCondition = stats.timeSinceHarvest >= minInterval;
    const balanceCondition = stats.balance >= minBalance;
    
    console.log("‚è∞ Time condition:", timeCondition ? "‚úÖ" : "‚ùå");
    console.log("üí∞ Balance condition:", balanceCondition ? "‚úÖ" : "‚ùå");
    
    return timeCondition && balanceCondition;
  }

  async executeHarvest() {
    try {
      console.log("\nüöú Executing harvest...");
      
      // Ê£ÄÊü•Gas‰ª∑Ê†º
      const gasPrice = await hre.ethers.provider.getFeeData();
      console.log("Gas Price:", hre.ethers.formatUnits(gasPrice.gasPrice || 0, 9), "Gwei");
      
      const tx = await this.vault.harvest({
        gasLimit: 500000
      });
      
      console.log("Transaction sent:", tx.hash);
      console.log("Waiting for confirmation...");
      
      const receipt = await tx.wait();
      console.log("‚úÖ Harvest successful!");
      console.log("Gas used:", receipt.gasUsed.toString());
      console.log("Transaction fee:", hre.ethers.formatEther(receipt.gasUsed * (gasPrice.gasPrice || 0)), "ETH");
      
      return true;
      
    } catch (error) {
      console.error("‚ùå Harvest failed:", error.message);
      return false;
    }
  }

  async runOnce() {
    console.log("\n" + "=".repeat(50));
    console.log("ü§ñ Keeper Check at", new Date().toLocaleString());
    
    const stats = await this.checkVaultStats();
    
    if (await this.checkHarvestConditions(stats)) {
      console.log("\n‚úÖ Conditions met! Executing harvest...");
      await this.executeHarvest();
    } else {
      console.log("\n‚è≥ Conditions not met, skipping harvest");
    }
  }

  start() {
    if (this.isRunning) {
      console.log("Keeper is already running");
      return;
    }

    console.log("\nüöÄ Starting Keeper service...");
    console.log("Check interval:", this.interval / 1000, "seconds");
    
    this.isRunning = true;
    
    // Á´ãÂç≥ÊâßË°å‰∏ÄÊ¨°
    this.runOnce();
    
    // ËÆæÁΩÆÂÆöÊó∂Ê£ÄÊü•
    this.intervalId = setInterval(() => {
      if (this.isRunning) {
        this.runOnce();
      }
    }, this.interval);
  }

  stop() {
    if (this.intervalId) {
      clearInterval(this.intervalId);
    }
    this.isRunning = false;
    console.log("\nüõë Keeper service stopped");
  }
}

async function main() {
  const keeper = new MockKeeper();
  await keeper.initialize();
  
  // ËøêË°åÊµãËØï
  console.log("\nüß™ Running single test...");
  await keeper.runOnce();
  
  console.log("\n" + "=".repeat(50));
  console.log("üí° To start continuous monitoring, uncomment the following line:");
  console.log("// keeper.start();");
  
  // Â¶ÇÊûú‰Ω†ÊÉ≥Ë¶ÅÊåÅÁª≠ÁõëÊéßÔºåÂèñÊ∂àÊ≥®Èáä‰∏ãÈù¢ËøôË°å
  // keeper.start();
  
  // ‰ºòÈõÖÈÄÄÂá∫
  process.on('SIGINT', () => {
    console.log('\nüëã Received SIGINT, shutting down gracefully...');
    keeper.stop();
    process.exit(0);
  });
}

if (require.main === module) {
  main()
    .then(() => {
      console.log("\n‚úÖ Keeper test completed");
      // process.exit(0);
    })
    .catch((error) => {
      console.error("‚ùå Keeper test failed:", error);
      process.exit(1);
    });
}

module.exports = MockKeeper;